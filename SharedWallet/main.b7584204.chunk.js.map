{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","balance","amount","allowanceLeft","owner","componentDidMount","eth","getAccounts","accounts","getChainId","networkId","sharedWallet","Contract","SharedWallet","abi","networks","address","allowance","Allowance","setState","get_State","alert","error","handleInputChange","event","target","value","type","checked","name","handleDeposit","methods","deposit","send","from","utils","toWei","result","fromWei","events","MoneyDeposited","returnValues","_totalAmount","handleWithdraw","withdraw","setAllowance","user","getOwner","call","ownResult","getBalance","balResult","balResultEth","this","className","onChange","onClick","placeholder","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7584204.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport SharedWallet from \"./contracts/SharedWallet.json\";\nimport Allowance from \"./contracts/Allowance.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded: false, balance: 0, amount: 0, allowanceLeft: 0, owner: '' };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.getChainId();\n\n      this.sharedWallet = new this.web3.eth.Contract(\n        SharedWallet.abi,\n        SharedWallet.networks[this.networkId] && SharedWallet.networks[this.networkId].address,\n      );\n  \n      this.allowance = new this.web3.eth.Contract(\n          Allowance.abi,\n          Allowance.networks[this.networkId] && Allowance.networks[this.networkId].address,\n          );\n   \n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({loaded:true}, this.get_State);\n  } catch (error) {\n    // Catch any errors for any of the above operations.\n    alert(\n      `Failed to load web3, accounts, or contract. Check console for details.`,\n    );\n    console.error(error);\n  }\n}\n\nhandleInputChange = (event) => {\n  const target = event.target;\n  const value = target.type === \"checkbox\" ? target.checked : target.value;\n  const name = target.name;\n  this.setState({\n    [name]: value\n  });\n}\n\nhandleDeposit = async() => {\n  const {amount} = this.state;\n  let result = await this.sharedWallet.methods.deposit().send({from: this.accounts[0], value: this.web3.utils.toWei(amount, 'ether')});\n  this.setState({\n    balance: this.web3.utils.fromWei(result.events.MoneyDeposited.returnValues._totalAmount, 'ether')\n  })\n  alert(amount+\" wei deposited successfully.\")\n}\n\nhandleWithdraw = async() => {\n  const {amount} = this.state;\n  await this.sharedWallet.methods.withdraw(this.web3.utils.toWei(amount, 'ether')).send({from: this.accounts[0]});\n  alert(amount+\" wei withdrawn successfully.\")\n}\n\nsetAllowance = async() => {\n  const {user, allowanceLeft} = this.state;\n  let result = await this.sharedWallet.methods.setAllowance(user, this.web3.utils.toWei(allowanceLeft, \"ether\")).send({from: this.accounts[0]});\n  console.log(result);\n  \n  alert(user+': allowance has been changed to '+allowanceLeft+\" ETH.\");\n}\n\nget_State = async() => {\n  let ownResult = await this.sharedWallet.methods.getOwner().call();\n  let balResult = await this.sharedWallet.methods.getBalance().call();\n  let balResultEth = this.web3.utils.fromWei(balResult, 'ether');\n  this.setState({owner: ownResult, balance: balResultEth});\n}\n\n  render() {\n    if (!this.state.loaded) {\n      return (\n        <div className=\"App\">\n          <h2>***This app only works if you are connected to Metamask***</h2>\n        <div className='container'>\n        <h1>Shared Ropsten Ether Bank</h1>\n        <p className='highlight'>Owner: {this.state.owner}</p>\n        <h3>ETH Balance: {this.state.balance}</h3>\n        <div className=\"row\">\n        Depsosit or Withdraw: <input type='text'name='amount'value={this.state.amount} onChange={this.handleInputChange}/>\n        <button type='button' onClick={this.handleDeposit}>Deposit</button>\n        <button type='button' onClick={this.handleWithdraw}>Withdraw</button>\n        </div>\n        \n          <h2>Allowance</h2>\n          \n          <div className='row'>\n          <input type='text'placeholder='Address'name=\"user\"value={this.state.user} onChange={this.handleInputChange}/>\n          <input type='text'placeholder='Allowance'name='allowanceLeft'value={this.state.allowanceLeft} onChange={this.handleInputChange}/>\n          <button type='button' onClick={this.setAllowance}>Set</button>\n          </div>\n        <p>*The owner must set your allowance first before you can withdraw funds.</p>\n        <p>***Staking coming soon***</p>\n      </div>\n      </div>\n      );\n    };\n    \n    return (\n      <div className=\"App\">\n        <div className='container'>\n          \n        <h1>Shared Ropsten Ether Bank</h1>\n        <p className='highlight'>Owner: {this.state.owner}</p>\n        <h3>ETH Balance: {this.state.balance}</h3>\n        <div className=\"row\">\n        Depsosit or Withdraw: <input type='text'name='amount'value={this.state.amount} onChange={this.handleInputChange}/>\n        \n        <button type='button' onClick={this.handleDeposit}>Deposit</button>\n        <button type='button' onClick={this.handleWithdraw}>Withdraw</button>\n        </div>\n          <h2>Allowance</h2>\n          \n          <div className='row'>\n          <input type='text'placeholder='Address'name=\"user\"value={this.state.user} onChange={this.handleInputChange}/>\n          <input type='text'placeholder='Allowance'name='allowanceLeft'value={this.state.allowanceLeft} onChange={this.handleInputChange}/>\n          <button type='button' onClick={this.setAllowance}>Set</button>\n          </div>\n  \n        <p>*The owner must set your allowance first before you can withdraw funds.</p>\n        <p>***Staking coming soon***</p>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}